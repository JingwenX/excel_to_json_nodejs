// Generated by CoffeeScript 1.10.0
(function() {
  var DEFAULT_OPTIONS, chai, convert, expect;

  convert = require('../lib/excel-as-json').convert;

  chai = require('chai');

  chai.should();

  expect = chai.expect;

  DEFAULT_OPTIONS = {
    isColOriented: false,
    omitEmptyFields: false
  };

  describe('convert', function() {
    it('should convert a row to a list of object', function() {
      var data, result;
      data = [['a', 'b', 'c'], [1, 2, 'true']];
      result = convert(data, DEFAULT_OPTIONS);
      return JSON.stringify(result).should.equal('[{"a":1,"b":2,"c":true}]');
    });
    it('should convert rows to a list of objects', function() {
      var data, result;
      data = [['a', 'b', 'c'], [1, 2, 3], [4, 5, 6]];
      result = convert(data, DEFAULT_OPTIONS);
      return JSON.stringify(result).should.equal('[{"a":1,"b":2,"c":3},{"a":4,"b":5,"c":6}]');
    });
    it('should convert rows to a list of objects, omitting empty values', function() {
      var data, o, result;
      o = {
        isColOriented: false,
        omitEmptyFields: true
      };
      data = [['a', 'b', 'c'], [1, '', 3], ['', 5, 6], ['', 5, '']];
      result = convert(data, o);
      return JSON.stringify(result).should.equal('[{"a":1,"c":3},{"b":5,"c":6},{"b":5}]');
    });
    it('should convert a column to list of object', function() {
      var data, o, result;
      o = {
        isColOriented: true,
        omitEmptyFields: false
      };
      data = [['a', 1], ['b', 2], ['c', 3]];
      result = convert(data, o);
      return JSON.stringify(result).should.equal('[{"a":1,"b":2,"c":3}]');
    });
    it('should convert columns to list of objects', function() {
      var data, o, result;
      o = {
        isColOriented: true,
        omitEmptyFields: false
      };
      data = [['a', 1, 4], ['b', 2, 5], ['c', 3, 6]];
      result = convert(data, o);
      return JSON.stringify(result).should.equal('[{"a":1,"b":2,"c":3},{"a":4,"b":5,"c":6}]');
    });
    it('should understand dotted key paths with 2 elements', function() {
      var data, result;
      data = [['a', 'b.a', 'b.b'], [1, 2, 3], [4, 5, 6]];
      result = convert(data, DEFAULT_OPTIONS);
      return JSON.stringify(result).should.equal('[{"a":1,"b":{"a":2,"b":3}},{"a":4,"b":{"a":5,"b":6}}]');
    });
    it('should understand dotted key paths with 2 elements and omit elements appropriately', function() {
      var data, o, result;
      o = {
        isColOriented: false,
        omitEmptyFields: true
      };
      data = [['a', 'b.a', 'b.b'], [1, 2, 3], ['', 5, '']];
      result = convert(data, o);
      return JSON.stringify(result).should.equal('[{"a":1,"b":{"a":2,"b":3}},{"b":{"a":5}}]');
    });
    it('should understand dotted key paths with 3 elements', function() {
      var data, result;
      data = [['a', 'b.a.b', 'c'], [1, 2, 3], [4, 5, 6]];
      result = convert(data, DEFAULT_OPTIONS);
      return JSON.stringify(result).should.equal('[{"a":1,"b":{"a":{"b":2}},"c":3},{"a":4,"b":{"a":{"b":5}},"c":6}]');
    });
    it('should understand indexed arrays in dotted paths', function() {
      var data, result;
      data = [['a[0].a', 'b.a.b', 'c'], [1, 2, 3], [4, 5, 6]];
      result = convert(data, DEFAULT_OPTIONS);
      return JSON.stringify(result).should.equal('[{"a":[{"a":1}],"b":{"a":{"b":2}},"c":3},{"a":[{"a":4}],"b":{"a":{"b":5}},"c":6}]');
    });
    it('should understand indexed arrays in dotted paths', function() {
      var data, result;
      data = [['a[0].a', 'a[0].b', 'c'], [1, 2, 3], [4, 5, 6]];
      result = convert(data, DEFAULT_OPTIONS);
      return JSON.stringify(result).should.equal('[{"a":[{"a":1,"b":2}],"c":3},{"a":[{"a":4,"b":5}],"c":6}]');
    });
    it('should understand indexed arrays when out of order', function() {
      var data, result;
      data = [['a[1].a', 'a[0].a', 'c'], [1, 2, 3], [4, 5, 6]];
      result = convert(data, DEFAULT_OPTIONS);
      return JSON.stringify(result).should.equal('[{"a":[{"a":2},{"a":1}],"c":3},{"a":[{"a":5},{"a":4}],"c":6}]');
    });
    it('should understand indexed arrays in deep dotted paths', function() {
      var data, result;
      data = [['a[0].a', 'b.a[0].b', 'c.a.b[0].d'], [1, 2, 3], [4, 5, 6]];
      result = convert(data, DEFAULT_OPTIONS);
      return JSON.stringify(result).should.equal('[{"a":[{"a":1}],"b":{"a":[{"b":2}]},"c":{"a":{"b":[{"d":3}]}}},{"a":[{"a":4}],"b":{"a":[{"b":5}]},"c":{"a":{"b":[{"d":6}]}}}]');
    });
    it('should understand flat arrays as terminal key names', function() {
      var data, result;
      data = [['a[]', 'b.a[]', 'c.a.b[]'], ['a;b', 'c;d', 'e;f'], ['g;h', 'i;j', 'k;l']];
      result = convert(data, DEFAULT_OPTIONS);
      return JSON.stringify(result).should.equal('[{"a":["a","b"],"b":{"a":["c","d"]},"c":{"a":{"b":["e","f"]}}},{"a":["g","h"],"b":{"a":["i","j"]},"c":{"a":{"b":["k","l"]}}}]');
    });
    return it('should convert text to numbers where appropriate', function() {
      var data, result;
      data = [['a', 'b', 'c'], ['-99', 'test', '2e64']];
      result = convert(data, DEFAULT_OPTIONS);
      return JSON.stringify(result).should.equal('[{"a":-99,"b":"test","c":2e+64}]');
    });
  });

}).call(this);
